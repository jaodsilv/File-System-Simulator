EP3 de MAC0422 - Sistemas Operacionais - Simulador de Sistema de Arquivos.

Integrantes: Renan Fichberg      7991131
             João M. M. da Silva 7577598

1. Compilação

Para compilação do código-fonte basta invocar do terminal
o seguinte comando, estando no diretório que contém o makefile:

§ make all

Tal chamada criará o binário necessário para executar o programa, no mesmo diretório
do makefile, e moverá os arquivos .o para o diretório /source/obj.

2. Uso

Para usar o simulador de sistema de arquivos, basta invocar o comando seguinte no terminal, sem parâmetros:

§ ./ep3

Uma vez feito isso, o usuário estará no prompt do programa. Lá, ele poderá executar qualquer um
dos comandos exigidos no enunciado. Note que para usar qualquer comando que não seja o 'mount',
precisa usar o comando 'mount' antes. O programa irá barrar quaisquer tentativas de fazer isso
sem que exista uma invocação anterior ao comando 'mount'. Ainda, a única checagem
que é feita com relação aos argumentos de cada comando são o número de argumentos e
se os argumentos são caminhos absolutos. ESTÁ A CARGO DO USUÁRIO CHECAR QUE A ROTA EXISTA
E ESCREVER DIREITO. Mais uma observação: o programa foi feito considerando APENAS
caracteres alfa-numéricos, alguns caracteres de pontuação, como '/' e '.'. O mal
funcionamento do código devido a caracteres não esperados é também culpa do uso indevido
do usuário e não dos programadores.

3. Organização.

Optamos por fazer essa organização de diretórios com a finalidade de ter um código com
baixo acoplamento entre seus módulos e que priorize a fácil localização de cada funcionalidade:

1) makefile e binário estarão no diretório 'raiz' do programa.
2) código-fonte estará no diretório source/
3) código-fonte de cada comando pode ser encontrado no diretório source/commands
3) arquivos .o gerados na compilação estarão no diretório source/obj/
4) arquivos .h podem ser encontrados no diretório headers/
5) slides podem ser encontrados no diretório presentation/

4. Arquivos e diretórios.

Estão sendo entregues os seguintes arquivos, nas suas respectivas
localizações:

1)  makefile - para compilação
2)  LEIAME.txt - este documento
3)  source/ - diretório com o código-fonte
4)  source/bitmap.c
5)  source/ep3.c
6)  source/fat.c
7)  source/fildir.c
8)  source/obj/ - diretório que irá conter todos os arquivos .o
9)  source/commands/ - diretório que contém um diretório com o código-fonte de cada comando
10) source/commands/cat/
11) source/commands/cat/cat.c
12) source/commands/cp/
13) source/commands/cp/cp.c
14) source/commands/df/
15) source/commands/df/df.c
16) source/commands/exit/
17) source/commands/exit/exit.c
18) source/commands/find/
19) source/commands/find/find.c
20) source/commands/ls/
21) source/commands/ls/ls.c
22) source/commands/mkdir/
23) source/commands/mkdir/mkdir.c
24) source/commands/mount/
25) source/commands/mount/mount.c
26) source/commands/rm/
27) source/commands/rm/rm.c
28) source/commands/rmdir/
29) source/commands/rmdir/rmdir.c
30) source/commands/touch/
31) source/commands/touch/touch.c
32) source/commands/umount/
33) source/commands/umount/umount.c
34) headers/ - diretório com os cabeçalhos
35) headers/bitmap.h
36) headers/ep3.h
37) headers/fat.h
38) headers/fildir.h
39) headers/partition.h
40) headers/commands/ - diretório que contém um diretório com os cabeçalhos de cada comando
41) headers/commands/cat/
42) headers/commands/cat/cat.h
43) headers/commands/cp/
44) headers/commands/cp/cp.h
45) headers/commands/df/
46) headers/commands/df/df.h
47) headers/commands/exit/
48) headers/commands/exit/exit.h
49) headers/commands/find/
50) headers/commands/find/find.h
51) headers/commands/ls/
52) headers/commands/ls/ls.h
53) headers/commands/mkdir/
54) headers/commands/mkdir/mkdir.h
55) headers/commands/mount/
56) headers/commands/mount/mount.h
57) headers/commands/rm/
58) headers/commands/rm/rm.h
59) headers/commands/rmdir/
60) headers/commands/rmdir/rmdir.h
61) headers/commands/touch/
62) headers/commands/touch/touch.h
63) headers/commands/umount/
64) headers/commands/umount/umount.h
65) presentation/slides.pdf - Slides a serem usados na apresentação em sala.

5. Sobre o código.

Obs: a seguir, neste documento, sempre que falarmos de "nome" de arquivos e diretórios,
está implícito que é o caminho absoluto. Assim, um arquivo "file.txt" no diretório "dir", que
por sua vez está no root ("/"), tem nome "/dir/file.txt" e o diretório "dir" tem nome "/dir/".
Ainda, está implicito que todos os nomes de diretórios terminam com o caracter '/' (no programa
o usuário não é obrigado a escrever esta barra final no nome do diretório pois o programa se
encarrega disso caso ele não a coloque).

Como a seção anterior indica, o código foi modularizado por 2 motivos em especial:

A) Primeiro, pela própria natureza do que foi especificado no enunciado como tarefa
B) Pelo modo que o próprio bash organiza seus utilitários, que nos serviu de inspiração.

Ao iniciar o programa, o usuário se depara com o prompt do EP3, que fica aguardando comandos.
Dentro do prompt, há um mecanismo para capturar os dados inseridos pelo usuário pela entrada
padrão (teclado) similar ao modo que um executável é iniciado pelo bash, só que sem usar chamadas
de sistema. Este mecanismo, junto da bibliotece string.h são suficientes para filtrar os comandos
e seus respetivos argumentos para fazer a validação e, se bem sucedidade, executar o que foi comandado.
A biblioteca readline foi usada neste EP para capturar os dados da entrada padrão. Ela também
é usada dentro do comando 'sai' para perguntar se o usuário tem certeza que deseja sair do simulador
quando tem um sistema de arquivos que ainda não foi desmontado com o comando 'umount' (encare isso
como uma funcionalidade 'safety' que achamos legal implementar).
A chamada ao comando 'mount' monta uma árvore de diretórios na estrutura de dados do programa e
abre um sistema de arquivos a partir do nome de um binário. Se o nome não referenciar nenhum arquivo,
um novo binário com o nome passado de argumento é criado, caso contrário, se existir um binário com
tal nome, este binário é carregado com as informações que foram deixadas na última execução (e a
árvore é remontada considerando estas informações).

6. Manipulação do arquivo binário (que contém o sistema de arquivos) criado ao executar o comando 'mount'.

Para manipular o arquivo binário, tivemos de pensar em um layout para guardar as informações e recuperá-las
em um momento futuro. Tal layout está descrito no arquivo "headers/partition.h". Basicamente, grande parte
das definições daquele arquivo são para manipular o ponteiro da stream de um FILE (stdlib.h) usando a função
fseek. A seguir, uma breve explicação da idéia central do layout:

As posições de caracters de [0, 76000[ (primeiros 76kb do arquivo) são reservadas para o Superbloco,
o bitmap (para gerenciamento de memória), a tabela de alocação de arquivos (FAT), o nome do root ("/"),
e as datas de criação, modificação e acesso do root (para um sistema de arquivos que não é novo, a sua
data de criação original, bem como as outras duas datas, são mantidas do jeito que foram deixadas. Isso vale
para os arquivos e diretórios do usuário, também). Depois disso, os bytes das posições [76000, 100000000 (= 100mb)[,
são reservados para diretórios e arquivos do usuário. Com relação a tais diretórios e arquivos, os seus primeiros
1100 bytes [0, 1100[ são reservados para metadados do arquivos, e os últimos 2900 bytes são reservados para dados (no
caso de arquivos texto). Cada bloco do arquivo binário, por definição, tem portanto, um tamanho 1100 + 2900 = 4kb e
quando um certo arquivo não cabe em apenas um bloco, ele usa blocos adicionais (e atavés das suas informações do FAT,
guardadas nos seus metadados junto das informações do FAT guardadas no primeiros 76kb do arquivo binário, conseguimos
recuperar o sistema de arquivos no estado em que ele foi deixado pela última vez).

7. Decisões de projeto que ainda não foram mencionadas

I   - Os diretórios, apesar de não terem nos seus metadados um campo reservado para "tamanho", assim como os
arquivos de texto vazios, eles também são guardados no bitmap e no FAT, ocupando apenas UM índice de ambas as
tabelas.
II  - Apesar dos arquivos de texto e dos diretórios terem esta mesma característica descrita em (I), os
2900 bytes da área de dados de um diretório não são considerados como desperdiçados, ao contrário de um
arquivo de texto vazio. Ou seja, o comando 'df' para um sistema de arquivos só com um diretório apontará
zero bytes desperdiçados enquanto um outro sistema arquivos, só com um arquivo de texto vazio (criado com
o comando touch) na raiz terá 2900 bytes apontados como desperdiçados ao rodar o mesmo comando.
III - Ao iniciar um novo arquivo binário, um caracter '\n' é colocado na posição 100000000 do arquivo, portanto,
os arquivos na realidade tem 100mb + 1b. Este caracter serve apenas para que o sistema de arquivos mostre sempre
a sua capacidade de 100mb. O tanto que de fato está sendo usado pode ser visto usando o comando 'df', já mencionado
anteriormente. Tal decisão de projeto foi escolhida para melhorar a manipulação do arquivo (e não correr riscos de
receber erros de barramento (SIGBUS)), considerando casos em que podem ter "blocos esparsos" (= blocos desalocados entre
blocos alocados). Este caracter é inacessível e existirá no arquivo binário até que o mesmo seja deletado. A
performance da leitura de arquivo não é afetada por isso (o programa sabe quando já leu tudo o que deveria Um arquivo não é
lido sempre até encontrar este caracter final). Ainda, esta implementação é a que mais pareceu fazer sentido,
imaginando que dispositivos móveis como pendrives, mídias como CDs e até mesmos discos rigídos tem tamanho fixo.

8. Problemas com testes.

Testar com centenas de arquivos foi especificamente trabalhoso. Criamos um script que faz várias execuções do
programa, rodando vários comandos consecutivamente, mas tinhamos erros em chamadas a fseek que poderiam ocorrer em
qualquer ponto do código. Uma pesquisa um pouco mais aprofundada nos revelou que não é um problema do nosso código em si,
mas sim porque um processe estava chamando a função 'fopen' vezes demais, e e por segurança, em determinado momento
o sistema operacional não deixava mais ele abrir um arquivo, carregando um ponteiro nulo para FILE para dentro da função
fseek, resultando em SIGSIEV naquele trecho de código. A solução encontrada para testar foi criar baterias de teste menores
e rodar novas instancias do EP separadamente, carregando o binário do ponto em que tinha sido deixado na última execução, assim
cada nova run do EP3 seria um novo processo e o total de 'fopen's que poderíamos dar seria zerado, dado que é um novo processo.
Para descobrir que este era o problema, apenas usamos o auxílio da biblioteca <errno.h>*, que retornava toda hora o erro
24. Abaixo a linha do header da errno.h que é retornada no EP caso a execução extrapole no limite de chamadas a 'fopen'.

"#define EMFILE      24  /* Too many open files */"

* Obs: a versão que está sendo entregue não tem essa modificação do código por não haver necessidade, uma vez que já estamos
escrevendo aqui o que deve ser feito para evitar o crash, caso o usuário decida rodar o EP3 com um script que vai fazer
milhares de chamadas a 'fopen' num mesmo processo)
Obs2: outro possível workaround (não testado por nós) para este problema é mexer nas configurações de segurança do
sistema operacional (aqui, estamos apenas falando de UNIX), no arquivo sysctl e mudar o número limite de arquivos que um
processo iniciado pelo seu usuário pode abrir. Por não ter sido testado por nós, qualquer um que tentar essa aproximação
está fazendo por conta própria e nós não nos responsabilizamos pelo resultado.

9. Exemplo de execução
A seguir um exemplo de execução válido para o nosso programa. Suponha que "<LEIAME>" é o caminho absoluto para este documento
no seu computador:

§ ./ep3
[EP3]: mount /tmp/fs.bin
[EP3]: mkdir /dir1
[EP3]: df
[EP3]: touch /dir1/file1.txt
[EP3]: df
[EP3]: mkdir /dir2
[EP3]: cp <LEIAME> /dir2
[EP3]: mkdir /dir1/dir2/
[EP3]: df
[EP3]: touch /dir1/dir2/file2.txt
[EP3]: df
[EP3]: rm /dir1/file1.txt
[EP3]: df
[EP3]: ls /
[EP3]: find / LEIAME
[EP3]: cat /dir/LEIAME
[EP3]: rmdir /dir2
[EP3]: df
[EP3]: mkdir /dir42
[EP3]: cp <LEIAME> /dir42
[EP3]: df
[EP3]: sai
> y
§ ./ep3
[EP3]: mount /tmp/fs2.bin
[EP3]: df
[EP3]: sai
> n
[EP3]: df
[EP3]: umount
[EP3]: df
[EP3]: mount /tmp/fs.bin
[EP3]: df
[EP3]: cat /dir42/LEIAME
[EP3]: rm /dir42/LEIAME
[EP3]: df
[EP3]: umount
[EP3]: sai

10. Observações.

- A chamada 'make clean' irá limpar o diretório /source/obj e remover o binario executável do programa do diretório raiz.
- O comando "time" (que não tem um código-fonte próprio presente dentro do diretório /source/commands/) foi criado para
auxilizar nos testes.
- O nome dos arquivos e diretórios (= caminho absoluto, só para recordar) devem ter no máximo 1024 caracteres, incluindo o caracter nulo
de término de string.
- Para calcular a memória desperdiçada, só são consideradas a área de dados dos arquivos de textos. Bytes não usados de outros trechos
da partição não são considerados desperdiçados por não serem acessíveis ao usuário.
